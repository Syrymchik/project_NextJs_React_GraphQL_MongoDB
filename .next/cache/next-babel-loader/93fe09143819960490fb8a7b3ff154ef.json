{"ast":null,"code":"const BASE_API = 'http://localhost:3005/api';\n\nconst axios = require('axios');\n\nasync function fetchAPI(query, {\n  variables\n} = {}) {\n  const res = await axios.post(BASE_API, JSON.stringify({\n    query,\n    variables\n  }).replace(/\\\\n/g, ''), {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(r => {\n    return r.data.data;\n  }).catch(err => {\n    console.log(err);\n    return [];\n  });\n  return res;\n}\n\nexport async function getAllPosts(name = 'hot', limit = 10, after = '', before = '') {\n  const data = await fetchAPI(` \n    query ($limit: Int, $after: String, $before: String){\n       ${name}(limit: $limit, after: $after, before: $before){\n            topics{\n              subreddit\n              permalink\n              id\n              title\n              score\n              thumbnail\n              url\n            }\n           before\n           after\n           dist\n        }\n    }\n  `, {\n    variables: {\n      limit: Number(limit),\n      after,\n      before\n    }\n  });\n  return data;\n}\nexport async function getAllPostsByText(limit = 10, after = '', before = '', searchText = '') {\n  const data = await fetchAPI(` \n    query ($limit: Int, $after: String, $before: String, $searchText: String){\n       search(limit: $limit, after: $after, before: $before, searchText: $searchText){\n            topics{\n              permalink\n              subreddit\n              id\n              title\n              score\n              thumbnail\n              url\n            }\n           before\n           after\n           dist\n        }\n    }\n  `, {\n    variables: {\n      limit: Number(limit),\n      after,\n      before,\n      searchText\n    }\n  });\n  return data;\n}\nexport async function getPostByPermaLink(permalink = '', commentLimit = 3, repliesLimit = 5) {\n  const data = await fetchAPI(` \n    query TopicAndComment($commentLimit: Int, $repliesLimit: Int, $permalink: String!) {\n      topicAndComment(commentLimit: $commentLimit, permalink: $permalink, repliesLimit: $repliesLimit) {\n        topic {\n          subreddit\n          title\n          score\n          thumbnail\n          url\n          selftext\n          permalink\n          author\n          created\n        }\n        comments {\n          subreddit\n          body\n          score\n          replies{\n            subreddit\n            body\n            score\n          }\n        }\n      }\n    }\n  `, {\n    variables: {\n      permalink,\n      commentLimit,\n      repliesLimit\n    }\n  });\n  return data;\n}\nexport async function addTopic(permalink = '', subreddit = '', title = '', score = 0, thumbnail = '', url = '', selftext = '', author = '', created = 0) {\n  const data = await fetchAPI(` \n        mutation addTopic(  $subreddit: String, $title: String, $score: Int\n    , $thumbnail: String, $url: String, $selftext: String\n    , $permalink: String!, $author: String, $created: Int) {\n    \n      addTopic( subreddit: $subreddit, title: $title\n      , score: $score, thumbnail: $thumbnail, url: $url, selftext: $selftext\n      , permalink: $permalink, author: $author, created: $created) {\n        title\n        score\n      }\n    }\n  `, {\n    variables: {\n      permalink,\n      subreddit,\n      title,\n      score,\n      thumbnail,\n      url,\n      selftext,\n      author,\n      created\n    }\n  });\n  return data;\n}","map":{"version":3,"sources":["C:/Users/Good/Desktop/Graphql/gateway/src/lib/api.js"],"names":["BASE_API","axios","require","fetchAPI","query","variables","res","post","JSON","stringify","replace","headers","then","r","data","catch","err","console","log","getAllPosts","name","limit","after","before","Number","getAllPostsByText","searchText","getPostByPermaLink","permalink","commentLimit","repliesLimit","addTopic","subreddit","title","score","thumbnail","url","selftext","author","created"],"mappings":"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","sourcesContent":["const BASE_API = 'http://localhost:3005/api';\r\nconst axios = require('axios');\r\n\r\n\r\nasync function fetchAPI(query, { variables } = {}) {\r\n\r\n    const res = await axios.post(BASE_API, JSON.stringify({query, variables,}).replace(/\\\\n/g, ''), {\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        }\r\n    })\r\n        .then(r => {\r\n            return r.data.data;\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n            return [];\r\n        });\r\n\r\n\r\n    return res;\r\n}\r\n\r\n\r\nexport async function getAllPosts(name = 'hot', limit = 10, after = '', before = '') {\r\n    const data = await fetchAPI(` \r\n    query ($limit: Int, $after: String, $before: String){\r\n       ${name}(limit: $limit, after: $after, before: $before){\r\n            topics{\r\n              subreddit\r\n              permalink\r\n              id\r\n              title\r\n              score\r\n              thumbnail\r\n              url\r\n            }\r\n           before\r\n           after\r\n           dist\r\n        }\r\n    }\r\n  `, { variables: { limit: Number(limit), after, before } });\r\n\r\n  return data;\r\n}\r\n\r\nexport async function getAllPostsByText(limit = 10, after = '', before = '', searchText = '') {\r\n    const data = await fetchAPI(` \r\n    query ($limit: Int, $after: String, $before: String, $searchText: String){\r\n       search(limit: $limit, after: $after, before: $before, searchText: $searchText){\r\n            topics{\r\n              permalink\r\n              subreddit\r\n              id\r\n              title\r\n              score\r\n              thumbnail\r\n              url\r\n            }\r\n           before\r\n           after\r\n           dist\r\n        }\r\n    }\r\n  `, { variables: { limit: Number(limit), after, before, searchText } });\r\n\r\n  return data;\r\n}\r\n\r\nexport async function getPostByPermaLink(permalink = '', commentLimit = 3, repliesLimit = 5) {\r\n    const data = await fetchAPI(` \r\n    query TopicAndComment($commentLimit: Int, $repliesLimit: Int, $permalink: String!) {\r\n      topicAndComment(commentLimit: $commentLimit, permalink: $permalink, repliesLimit: $repliesLimit) {\r\n        topic {\r\n          subreddit\r\n          title\r\n          score\r\n          thumbnail\r\n          url\r\n          selftext\r\n          permalink\r\n          author\r\n          created\r\n        }\r\n        comments {\r\n          subreddit\r\n          body\r\n          score\r\n          replies{\r\n            subreddit\r\n            body\r\n            score\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `, { variables: { permalink, commentLimit, repliesLimit } });\r\n\r\n    return data;\r\n}\r\n\r\nexport async function addTopic(permalink = '', subreddit = '', title = '', score = 0, thumbnail = '', url = '', selftext = '', author = '', created = 0) {\r\n    const data = await fetchAPI(` \r\n        mutation addTopic(  $subreddit: String, $title: String, $score: Int\r\n    , $thumbnail: String, $url: String, $selftext: String\r\n    , $permalink: String!, $author: String, $created: Int) {\r\n    \r\n      addTopic( subreddit: $subreddit, title: $title\r\n      , score: $score, thumbnail: $thumbnail, url: $url, selftext: $selftext\r\n      , permalink: $permalink, author: $author, created: $created) {\r\n        title\r\n        score\r\n      }\r\n    }\r\n  `, { variables: { permalink, subreddit, title, score, thumbnail, url, selftext, author, created } });\r\n\r\n    return data;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}